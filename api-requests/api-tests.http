###
# JKeyDB API Test Collection
#
# Now updated to test composite keys (Partition Key + Sort Key).
###

# --- Environment Variables ---
@baseUrl = http://localhost:8080/api/v1
@contentType = application/json

# Our new table schema
@tableName = Music
@partitionKeyName = Artist
@sortKeyName = SongTitle

# Data for our first item
@pkValue1 = Daft Punk
@skValue1 = One More Time

# Data for our second item (same artist, different song)
# CORRECT: The values do NOT have quotes around them here.
@pkValue2 = Daft Punk
@skValue2 = Harder Better Faster Stronger


### --------------------------------------------------
# 1. Create a table with a composite key
#
# Now we must provide both partitionKeyName and sortKeyName.
POST {{baseUrl}}/tables
Content-Type: {{contentType}}

{
  "tableName": "{{tableName}}",
  "partitionKeyName": "{{partitionKeyName}}",
  "sortKeyName": "{{sortKeyName}}"
}

### --------------------------------------------------
# 2. Add the first song for Daft Punk
#
# The request body MUST contain attributes for both keys.
POST {{baseUrl}}/tables/{{tableName}}/items
Content-Type: {{contentType}}

{
  "{{partitionKeyName}}": "{{pkValue1}}",
  "{{sortKeyName}}": "{{skValue1}}",
  "Album": "Discovery",
  "Year": 2001
}

### --------------------------------------------------
# 3. Add a second song for the SAME artist
#
# This demonstrates storing multiple items under the same partition key.
POST {{baseUrl}}/tables/{{tableName}}/items
Content-Type: {{contentType}}

{
  "{{partitionKeyName}}": "{{pkValue2}}",
  "{{sortKeyName}}": "{{skValue2}}",
  "Album": "Discovery",
  "Year": 2001
}

### --------------------------------------------------
# 4. Get a specific item using both keys
#
# The URL now requires both the partition key and sort key.
# Note: Spaces in URLs should be encoded as %20 or +. The HTTP client handles this.
GET {{baseUrl}}/tables/{{tableName}}/items/{{pkValue1}}/{{skValue1}}

### --------------------------------------------------
# 5. Delete a specific item
#
# The DELETE endpoint also requires both keys.
DELETE {{baseUrl}}/tables/{{tableName}}/items/{{pkValue1}}/{{skValue1}}

### --------------------------------------------------
# 6. Verify the item is gone
#
# This request should now return a 404 Not Found.
GET {{baseUrl}}/tables/{{tableName}}/items/{{pkValue1}}/{{skValue1}}

### --------------------------------------------------
# 7. Verify the other item still exists
#
# This GET request should still work and return a 200 OK.
GET {{baseUrl}}/tables/{{tableName}}/items/{{pkValue2}}/{{skValue2}}

### --------------------------------------------------
# 8. Query for ALL items in a partition
#
# This fetches all songs for the artist "Daft Punk".
# It uses a URL query parameter `?partitionKey=...`
GET {{baseUrl}}/tables/{{tableName}}/items?partitionKey={{pkValue1}}

### --------------------------------------------------
# 9. Query for a RANGE of items
#
# Fetches all songs by Daft Punk whose titles are alphabetically
# between "Harder..." and "One More Time".
# In this case, it should just return "Harder, Better, Faster, Stronger".
GET {{baseUrl}}/tables/{{tableName}}/items?partitionKey={{pkValue1}}&startKey=H&endKey=O